# Root: Battle
# Set a local variable named `total_siege` before calling
# `SCOPE` should be either `attacker` or `character` depending on if it's being called from the on_battle_started OA or
# for a battle condition, respectively
FAE_se_calculate_siege = {
    every_combat_unit = {
        save_scope_as = current_unit
        
        # Only consider troops controlled by the specified character
        # Check for that by checking if the troops belong to the same nation or an ally of the nation owned by the
        # character
        limit = {
            OR = {
                owner = scope:$SCOPE$.owner
                owner = {
                    is_in_war_together = scope:$SCOPE$.owner
                }
            }
        }
        
        # Add siege from combat engineers
        if = {
            limit = {
                owner = {
                    any_military_formation = {
                        has_mobilization_option = mobilization_option:FAE_mo_combat_engineers
                        any_combat_unit = {
                            this = scope:current_unit
                        }
                    }
                }
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_combat_engies
            }
        }
        
        # Add siege from unit type
        if = {
            limit = {
                has_unit_type = unit_type:combat_unit_type_light_tanks
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_light_tank
            }
        }
        else_if = {
            limit = {
                has_unit_type = unit_type:combat_unit_type_heavy_tank
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_heavy_tank
            }
        }
        else_if = {
            limit = {
                has_unit_type = unit_type:combat_unit_type_siege_artillery
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_siege_arty
            }
        }
        else_if = {
            limit = {
                has_unit_type = unit_type:combat_unit_type_shrapnel_artillery
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_shrapnel_arty
            }
        }
        else_if = {
            limit = {
                has_unit_type = unit_type:combat_unit_type_mobile_artillery
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_mobile_arty
            }
        }
        else_if = {
            limit = {
                has_unit_type = unit_type:combat_unit_type_cannon_artillery
            }
            change_local_variable = {
                name = total_siege
                add  = FAE_siege_cannon_arty
            }
        }
    }
}

# Scope: country
# Calculates and (re)applies backup modifier to increase fort levels for hands-off mod compatibility in case someone
# comes in and touches the tech definitions
FAE_se_refresh_fort_max_lvl = {
    if = {
        limit = {
            NOT = {
                has_variable = FAE_refresh_fort_max_lvl_debounce
            }
        }
        
        # Debounce needed in case multiple techs are researched on the same day
        # Due to how the math works, firing this multiple times in a single day causes the correction amount to be over-
        # calculated, resulting in more levels than they should be getting.
        set_variable = {
            name  = FAE_refresh_fort_max_lvl_debounce
            value = yes
            days  = 1
        }
        
        remove_modifier = FAE_md_fort_max_level
        set_local_variable = {
            name  = expected_max_lvl
            value = {
                if = {
                    limit = {
                        has_technology_researched = standing_army
                    }
                    add = 1
                }
                if = {
                    limit = {
                        has_technology_researched = napoleonic_warfare
                    }
                    add = 1
                }
                if = {
                    limit = {
                        has_technology_researched = field_works
                    }
                    add = 1
                }
                if = {
                    limit = {
                        has_technology_researched = breech_loading_artillery
                    }
                    add = 2
                }
                if = {
                    limit = {
                        has_technology_researched = defense_in_depth
                    }
                    add = 2
                }
                if = {
                    limit = {
                        has_technology_researched = concrete_fortifications
                    }
                    add = 3
                }
            }
        }
        
        if = {
            limit = {
                local_var:expected_max_lvl != {
                    add = modifier:state_fae_building_forts_max_level_add
                    subtract = {
                        if = {
                            limit = {
                                has_variable = FAE_max_lvl_correction
                            }
                            add = var:FAE_max_lvl_correction
                        }
                    }
                }
            }
            if = {
                limit = {
                    NOT = {
                        has_variable = FAE_max_lvl_correction
                    }
                }
                set_variable = {
                    name  = FAE_max_lvl_correction
                    value = 0
                }
            }
            set_variable = {
                name  = FAE_max_lvl_correction
                value = {
                    add      = local_var:expected_max_lvl
                    subtract = {
                        add      = modifier:state_fae_building_forts_max_level_add
                        subtract = var:FAE_max_lvl_correction
                    }
                }
            }
            add_modifier = {
                name = FAE_md_fort_max_level
                multiplier = var:FAE_max_lvl_correction
            }
        }
    }
}
