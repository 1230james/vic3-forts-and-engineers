# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
    on_actions = {
        FAE_on_battle_started
    }
}

FAE_on_battle_started = {
    effect = {
        
        # TODO: DEBUG - Remove
        scope:attacker = {
            owner = {
                set_variable = {
                    name  = battle
                    value = scope:battle
                }
            }
        }
        scope:defender = {
            owner = {
                set_variable = {
                    name  = battle
                    value = scope:battle
                }
            }
        }
        
        if = {
            # Conditional
            limit = {
                # State must have fort owned by the defender's country or a war ally of the defender's country
                # and it can't be mothballed
                scope:state ?= {
                    has_building = FAE_building_forts
                    OR = {
                        owner = scope:defender.owner
                        owner = {
                            is_in_war_together = scope:defender.owner
                        }
                    }
                    this.b:FAE_building_forts = {
                        NOT = {
                            has_active_production_method = FAE_pm_mothballed
                        }
                    }
                }
                
                # Guard
                # This on_action is fired twice (once for each country) for some reason
                scope:defender ?= {
                    NOR = {
                        has_modifier = FAE_md_fort_defense_strong
                        has_modifier = FAE_md_fort_defense_weak
                    }
                }
            }
            
            # Calculate & apply fort battle modifier
            scope:state.b:FAE_building_forts = {
                add_modifier = {
                    name = FAE_md_fort_in_battle
                    multiplier = {
                        add = 1    # The quotation marks are necessary for correct parsing of the parentheses, apparently
                        multiply = "scope:battle.front.average_offense(scope:attacker.owner)"
                        divide   = "scope:battle.front.average_defense(scope:defender.owner)"
                        min      = 0.01
                        max      = 3
                    }
                }
            }
            
            # Calculate total siege points (based on attacking units)
            set_local_variable = {
                name  = total_siege
                value = 0
            }
            scope:battle = {
                FAE_se_calculate_siege = {
                    SCOPE = attacker
                }
            }
            
            # Calculate total entrenchment points (based on fort level & defending units)
            set_local_variable = {
                name  = total_entrenchment
                value = {
                    add      = scope:state.b:FAE_building_forts.modifier:unit_FAE_entrenchment_add
                    multiply = {
                        scope:battle = {
                            every_combat_unit = {
                                limit = {
                                    OR = {
                                        owner = scope:defender.owner
                                        owner = {
                                            is_in_war_together = scope:defender.owner
                                        }
                                    }
                                }
                                add = 1
                            }
                        }
                    }
                }
            }
            
            # Save as variables for later use (battle conditions)
            scope:attacker = {
                set_variable = {
                    name  = FAE_siege
                    value = local_var:total_siege
                }
            }
            scope:defender = {
                set_variable = {
                    name  = FAE_entrenchment
                    value = local_var:total_entrenchment
                }
            }
            
            # Attacker has engineers
            if = {
                # Condition
                limit = {
                    local_var:total_siege > 0
                }
                
                # Calculate fort benefits reduction from engineer usage
                set_local_variable = {
                    name  = attacker_engineer_multiplier
                    value = {
                        # Calculate siege ratio
                        add      = local_var:total_entrenchment
                        subtract = local_var:total_siege
                        divide   = local_var:total_entrenchment
                        
                        # Bounds
                        min = FAE_WEAK_FORT_MIN_BONUS
                    }
                }
                
                # Apply sapped fort modifier
                scope:defender = {
                    add_modifier = {
                        name       = FAE_md_fort_defense_weak
                        multiplier = {
                            add      = 1 # Default value for script math blocks is 0. DO NOT DELETE!!!
                            add      = scope:state.b:FAE_building_forts.modifier:unit_defense_mult
                            multiply = scope:state.b:FAE_building_forts.modifier:unit_defense_add
                            multiply = local_var:attacker_engineer_multiplier
                        }
                    }
                    add_modifier = {
                        name       = FAE_md_fort_kill_rate_weak
                        multiplier = {
                            add      = 1
                            multiply = scope:state.b:FAE_building_forts.modifier:unit_kill_rate_add
                            multiply = local_var:attacker_engineer_multiplier
                        }
                    }
                    # add_modifier = {
                        # name       = FAE_md_fort_provinces_lost_weak
                        # multiplier = {
                            # add      = 1
                            # multiply = scope:state.b:FAE_building_forts.modifier:unit_provinces_lost_mult
                            # multiply = local_var:attacker_engineer_multiplier
                        # }
                    # }
                }
                scope:attacker ?= {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_occupation_speed
                        }
                        remove_modifier = FAE_md_fort_occupation_speed
                    }
                    add_modifier = {
                        name       = FAE_md_fort_occupation_speed
                        multiplier = {
                            add      = 1
                            multiply = scope:state.b:FAE_building_forts.modifier:unit_occupation_mult
                            multiply = local_var:attacker_engineer_multiplier
                        }
                    }
                }
            }
            
            # Attacker does not have engineers
            else = {
                scope:defender = {
                    add_modifier = {
                        name       = FAE_md_fort_defense_strong
                        multiplier = {
                            add      = 1
                            add      = scope:state.b:FAE_building_forts.modifier:unit_defense_mult
                            multiply = scope:state.b:FAE_building_forts.modifier:unit_defense_add
                        }
                    }
                    add_modifier = {
                        name       = FAE_md_fort_kill_rate_strong
                        multiplier = scope:state.b:FAE_building_forts.modifier:unit_kill_rate_add
                    }
                    # add_modifier = {
                        # name       = FAE_md_fort_provinces_lost_strong
                        # multiplier = scope:state.b:FAE_building_forts.modifier:unit_provinces_lost_mult
                    # }
                }
            }
            
            # Save fort for later use
            scope:defender = {
                set_variable = {
                    name  = FAE_fort_used
                    value = scope:state.b:FAE_building_forts
                }
            }
        }
    }
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {
    on_actions = {
        FAE_on_battle_ended
    }
}

FAE_on_battle_ended = {
    effect = {
        scope:state ?= {
            if = {
                limit = {
                    has_building = FAE_building_forts
                }
                this.b:FAE_building_forts = {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_in_battle
                        }
                        remove_modifier = FAE_md_fort_in_battle
                    }
                }
            }
        }
        
        trigger_event = {
            id   = FAE_ev.2 # removes occupation speed malus from attacker
            days = 1 # 1 day delay to ensure occupation malus is applied
        }
        
        scope:defender ?= {
            # wow this looks gross
            if = {
                limit = {
                    has_modifier = FAE_md_fort_defense_strong
                }
                remove_modifier = FAE_md_fort_defense_strong
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_defense_weak
                }
                remove_modifier = FAE_md_fort_defense_weak
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_kill_rate_strong
                }
                remove_modifier = FAE_md_fort_kill_rate_strong
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_kill_rate_weak
                }
                remove_modifier = FAE_md_fort_kill_rate_weak
            }
            # if = {
                # limit = {
                    # has_modifier = FAE_md_fort_provinces_lost_strong
                # }
                # remove_modifier = FAE_md_fort_provinces_lost_strong
            # }
            # if = {
                # limit = {
                    # has_modifier = FAE_md_fort_provinces_lost_weak
                # }
                # remove_modifier = FAE_md_fort_provinces_lost_weak
            # }
            
            if = {
                limit = {
                    has_variable = FAE_fort_used
                }
                var:FAE_fort_used = {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_in_battle
                        }
                        remove_modifier = FAE_md_fort_in_battle
                    }
                }
                remove_variable = FAE_fort_used
            }
        }
    }
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
    on_actions = {
        FAE_oa_on_war_end
    }
}

# on_battle_ended doesn't fire for battles ended prematurely (e.g. from peace being signed mid-battle), so we're using
# this to clean up lingering battle modifiers when wars end
FAE_oa_on_war_end = {
    effect = {
        every_country = {
            trigger_event = {
                id   = FAE_ev.1
                days = 1 # 1 day delay to prevent race condition (or at least i think there is one? idfk at this point)
            }
        }
    }
}
