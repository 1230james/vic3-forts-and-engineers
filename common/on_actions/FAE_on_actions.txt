# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
    on_actions = {
        FAE_on_battle_started
    }
}

FAE_on_battle_started = {
    effect = {
        if = {
            # Conditional
            limit = {
                # State must have fort owned by the defender's country or a war ally of the defender's country
                # and it can't be mothballed
                scope:state ?= {
                    has_building = fae_building_forts
                    OR = {
                        owner = scope:defender.owner
                        owner = {
                            is_in_war_together = scope:defender.owner
                        }
                    }
                    this.b:fae_building_forts = {
                        NOT = {
                            has_active_production_method = FAE_pm_mothballed
                        }
                    }
                }
                
                # Guard
                # This on_action is fired twice (once for each country) for some reason
                scope:defender ?= {
                    NOR = {
                        has_modifier = FAE_md_fort_defense_strong
                        has_modifier = FAE_md_fort_defense_mid
                        has_modifier = FAE_md_fort_defense_weak
                    }
                }
            }
            
            # State battle counter
            scope:state = {
                # No ongoing battles
                if = {
                    limit = {
                        NOT = {
                            has_variable = FAE_num_battles
                        }
                    }
                    set_variable = {
                        name  = FAE_num_battles
                        value = 1
                    }
                }
                
                # Battle already ongoing
                else = {
                    change_variable = {
                        name = FAE_num_battles
                        add  = 1
                    }
                }
            }
            
            # Calculate & apply fort battle modifier
            set_local_variable = { # Mortality from military strength comparison
                name  = fort_mortality_mult_base
                value = {
                    add = 1    # The quotation marks are necessary for correct parsing of the parentheses, apparently
                    multiply = "scope:battle.front.average_offense(scope:attacker.owner)"
                    divide   = "scope:battle.front.average_defense(scope:defender.owner)"
                    min      = 0.01
                    max      = 3
                }
            }
            set_local_variable = { # Mortality from concurrent battles
                name  = fort_mortality_mult_battles
                value = { # 0.5 + (0.5 * num_battles) => extra 50% mortality for each concurrent battle past first one
                    add      = scope:state.var:FAE_num_battles
                    multiply = 0.5
                    add      = 0.5
                }
            }
            scope:state = {
                set_variable = {
                    name  = FAE_morality_mult_base
                    value = local_var:fort_mortality_mult_base
                }
                
                b:fae_building_forts = {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_in_battle
                        }
                        remove_modifier = FAE_md_fort_in_battle
                    }
                    add_modifier = {
                        name = FAE_md_fort_in_battle
                        multiplier = {
                            add      = local_var:fort_mortality_mult_base
                            multiply = local_var:fort_mortality_mult_battles
                        }
                    }
                }
            }
            
            # Calculate total siege points (based on attacking units)
            set_local_variable = {
                name  = total_siege
                value = 0
            }
            scope:battle = {
                FAE_se_calculate_siege = {
                    SCOPE = attacker
                }
            }
            
            # Calculate total entrenchment points (based on fort level & defending units)
            set_local_variable = {
                name  = total_entrenchment
                value = {
                    add      = scope:state.b:fae_building_forts.modifier:unit_fae_entrenchment_add
                    multiply = {
                        scope:battle = {
                            every_combat_unit = {
                                limit = {
                                    OR = {
                                        owner = scope:defender.owner
                                        owner = {
                                            is_in_war_together = scope:defender.owner
                                        }
                                    }
                                }
                                add = 1
                            }
                        }
                    }
                }
            }
            
            # Save as variables for later use (battle conditions)
            scope:attacker = {
                set_variable = {
                    name  = FAE_siege
                    value = local_var:total_siege
                }
            }
            scope:defender = {
                set_variable = {
                    name  = FAE_entrenchment
                    value = local_var:total_entrenchment
                }
            }
            
            # Attacker has engineers
            if = {
                # Condition
                limit = {
                    local_var:total_siege > 0
                }
                
                # Calculate fort benefits reduction from engineer usage
                set_local_variable = {
                    name  = attacker_engineer_multiplier
                    value = {
                        # Calculate siege ratio
                        add      = local_var:total_entrenchment
                        subtract = local_var:total_siege
                        divide   = local_var:total_entrenchment
                        
                        # Bounds
                        min = FAE_WEAK_FORT_MIN_BONUS
                    }
                }
                
                # Calculate fort modifiers
                set_local_variable = {
                    name  = fort_defense_mult
                    value = {
                        add      = 1 # Default value for script math blocks is 0. DO NOT DELETE!!!
                        add      = scope:state.b:fae_building_forts.modifier:unit_defense_mult
                        multiply = scope:state.b:fae_building_forts.modifier:unit_defense_add
                        multiply = local_var:attacker_engineer_multiplier
                    }
                }
                # set_local_variable = {
                    # name  = fort_provinces_mult
                    # value = {
                        # add      = 1
                        # multiply = scope:state.b:fae_building_forts.modifier:unit_provinces_lost_mult
                        # multiply = local_var:attacker_engineer_multiplier
                    # }
                # }
                set_local_variable = {
                    name  = fort_kill_rate_mult
                    value = {
                        add      = 1
                        multiply = scope:state.b:fae_building_forts.modifier:unit_kill_rate_add
                        multiply = local_var:attacker_engineer_multiplier
                    }
                }
                
                # Apply modifiers
                scope:defender = {
                    if = {
                        limit = {
                            local_var:attacker_engineer_multiplier >= FAE_STRONG_FORT_BONUS_THRESHOLD
                        }
                        add_modifier = {
                            name       = FAE_md_fort_defense_strong
                            multiplier = local_var:fort_defense_mult
                        }
                        add_modifier = {
                            name       = FAE_md_fort_kill_rate_strong
                            multiplier = local_var:fort_kill_rate_mult
                        }
                        # add_modifier = {
                            # name       = FAE_md_fort_provinces_lost_strong
                            # multiplier = local_var:fort_provinces_mult
                        # }
                    }
                    else_if = {
                        limit = {
                            local_var:attacker_engineer_multiplier >= FAE_PARTIAL_FORT_BONUS_THRESHOLD
                        }
                        add_modifier = {
                            name       = FAE_md_fort_defense_mid
                            multiplier = local_var:fort_defense_mult
                        }
                        add_modifier = {
                            name       = FAE_md_fort_kill_rate_mid
                            multiplier = local_var:fort_kill_rate_mult
                        }
                    }
                    else = {
                        add_modifier = {
                            name       = FAE_md_fort_defense_weak
                            multiplier = local_var:fort_defense_mult
                        }
                        add_modifier = {
                            name       = FAE_md_fort_kill_rate_weak
                            multiplier = local_var:fort_kill_rate_mult
                        }
                    }
                }
                scope:attacker ?= {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_occupation_speed
                        }
                        remove_modifier = FAE_md_fort_occupation_speed
                    }
                    add_modifier = {
                        name       = FAE_md_fort_occupation_speed
                        multiplier = {
                            add      = 1
                            multiply = scope:state.b:fae_building_forts.modifier:unit_occupation_mult
                            multiply = local_var:attacker_engineer_multiplier
                        }
                    }
                }
            }
            
            # Attacker does not have engineers
            else = {
                scope:defender = {
                    add_modifier = {
                        name       = FAE_md_fort_defense_strong
                        multiplier = {
                            add      = 1
                            add      = scope:state.b:fae_building_forts.modifier:unit_defense_mult
                            multiply = scope:state.b:fae_building_forts.modifier:unit_defense_add
                        }
                    }
                    add_modifier = {
                        name       = FAE_md_fort_kill_rate_strong
                        multiplier = scope:state.b:fae_building_forts.modifier:unit_kill_rate_add
                    }
                    # add_modifier = {
                        # name       = FAE_md_fort_provinces_lost_strong
                        # multiplier = scope:state.b:fae_building_forts.modifier:unit_provinces_lost_mult
                    # }
                }
                scope:attacker ?= {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_occupation_speed
                        }
                        remove_modifier = FAE_md_fort_occupation_speed
                    }
                    add_modifier = {
                        name       = FAE_md_fort_occupation_speed
                        multiplier = scope:state.b:fae_building_forts.modifier:unit_occupation_mult
                    }
                }
            }
            
            # Save fort for later use
            scope:defender = {
                set_variable = {
                    name  = FAE_fort_used
                    value = scope:state.b:fae_building_forts
                }
            }
        }
    }
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {
    on_actions = {
        FAE_on_battle_ended
    }
}

FAE_on_battle_ended = {
    effect = {
        scope:state ?= {
            # Only execute fort-related clean up logic if there was a defending general (because game state is only
            # modified by FAE_on_battle_started if a defending general is present)
            if = {
                limit = {
                    # Guard - this on_action is also fired twice
                    scope:defender ?= {
                        OR = {
                            has_modifier = FAE_md_fort_defense_strong
                            has_modifier = FAE_md_fort_defense_mid
                            has_modifier = FAE_md_fort_defense_weak
                        }
                    }
                }
                
                # Update battle counter
                change_variable = {
                    name     = FAE_num_battles
                    subtract = 1
                }
                if = {
                    limit = {
                        var:FAE_num_battles = 0
                    }
                    remove_variable = FAE_num_battles
                    remove_variable = FAE_morality_mult_base
                }
                
                # Update fort mortality modifier
                if = {
                    limit = {
                        has_building = fae_building_forts
                    }
                    
                    # Recalculate fort mortality if battles still ongoing
                    if = {
                        limit = {
                            has_variable = FAE_num_battles
                        }
                        set_local_variable = {
                            name  = fort_mortality_mult_base
                            value = var:FAE_morality_mult_base
                        }
                        set_local_variable = {
                            name  = fort_mortality_mult_battles
                            value = {
                                add      = var:FAE_num_battles
                                multiply = 0.5
                                add      = 0.5
                            }
                        }
                        b:fae_building_forts = {
                            if = {
                                limit = {
                                    has_modifier = FAE_md_fort_in_battle
                                }
                                remove_modifier = FAE_md_fort_in_battle
                            }
                            add_modifier = {
                                name = FAE_md_fort_in_battle
                                multiplier = {
                                    add      = local_var:fort_mortality_mult_base
                                    multiply = local_var:fort_mortality_mult_battles
                                }
                            }
                        }
                    }
                    
                    # Clear fort mortality modifier if no more battles
                    else = {
                        this.b:fae_building_forts = {
                            if = {
                                limit = {
                                    has_modifier = FAE_md_fort_in_battle
                                }
                                remove_modifier = FAE_md_fort_in_battle
                            }
                        }
                    }
                }
            }
        }
        
        trigger_event = {
            id   = FAE_ev.2 # removes occupation speed malus from attacker
            days = 1 # 1 day delay to ensure occupation malus is applied
        }
        
        scope:defender ?= {
            # wow this looks gross
            if = {
                limit = {
                    has_modifier = FAE_md_fort_defense_strong
                }
                remove_modifier = FAE_md_fort_defense_strong
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_defense_mid
                }
                remove_modifier = FAE_md_fort_defense_mid
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_defense_weak
                }
                remove_modifier = FAE_md_fort_defense_weak
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_kill_rate_strong
                }
                remove_modifier = FAE_md_fort_kill_rate_strong
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_kill_rate_mid
                }
                remove_modifier = FAE_md_fort_kill_rate_mid
            }
            if = {
                limit = {
                    has_modifier = FAE_md_fort_kill_rate_weak
                }
                remove_modifier = FAE_md_fort_kill_rate_weak
            }
            # if = {
                # limit = {
                    # has_modifier = FAE_md_fort_provinces_lost_strong
                # }
                # remove_modifier = FAE_md_fort_provinces_lost_strong
            # }
            # if = {
                # limit = {
                    # has_modifier = FAE_md_fort_provinces_lost_weak
                # }
                # remove_modifier = FAE_md_fort_provinces_lost_weak
            # }
            
            if = {
                limit = {
                    has_variable = FAE_fort_used
                }
                var:FAE_fort_used = {
                    if = {
                        limit = {
                            has_modifier = FAE_md_fort_in_battle
                        }
                        remove_modifier = FAE_md_fort_in_battle
                    }
                    
                    state ?= { # Battle counter decrement failsafe
                        if = {
                            limit = {
                                has_variable = FAE_num_battles
                                NOT = {
                                    scope:state = THIS
                                }
                            }
                            change_variable = {
                                name     = FAE_num_battles
                                subtract = 1
                            }
                            if = {
                                limit = {
                                    var:FAE_num_battles = 0
                                }
                                remove_variable = FAE_num_battles
                                remove_variable = FAE_morality_mult_base
                            }
                        }
                    }
                }
                remove_variable = FAE_fort_used
            }
        }
    }
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
    on_actions = {
        FAE_oa_on_war_end
    }
}

# on_battle_ended doesn't fire for battles ended prematurely (e.g. from peace being signed mid-battle), so we're using
# this to clean up lingering battle modifiers when wars end
FAE_oa_on_war_end = {
    effect = {
        every_country = {
            trigger_event = {
                id   = FAE_ev.1
                days = 1 # 1 day delay to prevent race condition (or at least i think there is one? idfk at this point)
            }
        }
    }
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
    on_actions = {
        FAE_oa_on_acquired_technology
    }
}

FAE_oa_on_acquired_technology = {
    trigger = {
        has_game_started = yes
    }
    effect = {
        trigger_event = {
            id   = FAE_ev.3
            days = 1 # Delay for modifier update
        }
    }
}
