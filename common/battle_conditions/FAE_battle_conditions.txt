# Battle condition to represent attackers breaching a fort
# Note that the battle condition supposes only a single fort in particular has been breached, while the building is
# supposed to represent a network/system of multiple fortifications.
FAE_battle_condition_attacker_fort_breached = {
    icon = "gfx/interface/icons/battle_conditions/FAE_battle_condition_fort_breached_positive.dds"
    
    modifier = {
        unit_kill_rate_add = 0.10
        unit_offense_mult  = 0.50
        unit_provinces_captured_mult = 0.10
    }
    
    possible = {
        # Generals existence check
        scope:character ?= {
            has_role = general
            exists   = opposing_commander
        }
        
        # Attackers only
        scope:is_advancing_side = yes
        
        # Check if defender has fort
        province.state = {
            has_building = FAE_building_forts
            OR = {
                owner = scope:character.opposing_commander.owner
                owner = {
                    is_in_war_together = scope:character.opposing_commander.owner
                }
            }
        }
        
        # A fort isn't already being breached
        battle = {
            defender_side = {
                NOT = {
                    has_battle_condition = FAE_battle_condition_defender_fort_breached
                }
            }
        }
    }
    
    weight = {
        value = 0.5
        
        # Static bonus for using engineer specialists
        if = {
            limit = {
                FAE_sv_get_character_total_engineers_pm_usage > 0.5
            }
            add = 1
        }
        
        # Static bonus for using infiltrator specialists
        if = {
            limit = {
                battle = {
                    OR = { # I cba to make more script values to do a proper calculation of this crap
                        battle_side_pm_usage = {
                            target = scope:character.owner
                            production_method = pm_infiltrators
                            value > 0.5
                        }
                        battle_side_pm_usage = {
                            target = scope:character.owner
                            production_method = pm_infiltrators_conscription
                            value > 0.5
                        }
                    }
                }
            }
            add = 1
        }

        # Static bonuses for using tanks
        if = {
            limit = {
                battle = {
                    OR = {
                        battle_side_pm_usage = {
                            target = scope:character.owner
                            production_method = pm_mechanized_infantry
                            value > 0.5
                        }
                        battle_side_pm_usage = {
                            target = scope:character.owner
                            production_method = pm_mechanized_infantry_conscription
                            value > 0.5
                        }
                    }
                }
            }
            if = {
                limit = {
                    scope:state.b:FAE_building_forts = {
                        has_active_production_method = FAE_pm_wood_palisades
                    }
                }
                add = 1
            }
            else_if = {
                limit = {
                    scope:state.b:FAE_building_forts = {
                        has_active_production_method = FAE_pm_stone_iron
                    }
                }
                add = 0.5
            }
            # Concrete omitted (no bonus)
        }
        
        # Static bonuses for HAUBITZE (siege artillery)
        if = {
            limit = {
                battle = {
                    OR = {
                        battle_side_pm_usage = {
                            target = scope:character.owner
                            production_method = pm_siege_artillery
                            value > 0.5
                        }
                        battle_side_pm_usage = {
                            target = scope:character.owner
                            production_method = pm_siege_artillery_conscription
                            value > 0.5
                        }
                    }
                }
            }
            if = {
                limit = {
                    scope:state.b:FAE_building_forts = {
                        has_active_production_method = FAE_pm_wood_palisades
                    }
                }
                add = 1.5
            }
            else_if = {
                limit = {
                    scope:state.b:FAE_building_forts = {
                        has_active_production_method = FAE_pm_stone_iron
                    }
                }
                add = 1
            }
            else_if = {
                limit = {
                    scope:state.b:FAE_building_forts = {
                        has_active_production_method = FAE_pm_steel_concrete
                    }
                }
                add = 0.5
            }
        }
        
        # Apply commander's traits
        multiply = {
            value = 1
            scope:character = {
                add = modifier:character_FAE_battle_condition_attacker_fort_breached_mult
            }
            min = 0
        }
    }
}

# Corresponding battle condition for defenders when a fort is breached to really help the attackers gain an edge
FAE_battle_condition_defender_fort_breached = {
    icon = "gfx/interface/icons/battle_conditions/FAE_battle_condition_fort_breached_negative.dds"
    
    modifier = {
        battle_casualties_mult = 0.30
        unit_defense_mult      = -0.25
        unit_kill_rate_add     = -0.10
    }
    
    possible = {
        # Generals existence check
        scope:character ?= {
            has_role = general
            exists   = opposing_commander
        }
        
        # Attackers only
        scope:is_advancing_side = no
        
        # Check if defender has fort
        province.state = {
            has_building = FAE_building_forts
            OR = {
                owner = scope:character.owner
                owner = {
                    is_in_war_together = scope:character.owner
                }
            }
        }
        
        # A fort is being breached
        battle = {
            attacker_side = {
                has_battle_condition = FAE_battle_condition_attacker_fort_breached
            }
        }
    }
    
    weight = {
        value = 1000000
    }
}
